call pathogen#infect()
call pathogen#helptags()
set nocompatible
set hidden
syntax on
let mapleader=","


syntax enable
set background=dark
colorscheme tomorrow-night-eighties

set showtabline=2
set number
set ruler
set showmatch
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent " Copy indent from last line when starting new line.
set cursorline " Highlight current line
set vb
set ignorecase smartcase
set infercase
"set wildmode=list,longest
"set wildmenu
set cmdheight=2
set numberwidth=5
set clipboard=unnamed

set winwidth=150
autocmd BufRead *.master set syntax=html

set list
set listchars=tab:▸\ ,eol:¬

map <Left> :echo "NOPE!"<cr>
map <Right> :echo "NOPE!"<cr>
map <Up> :echo "NOPE!"<cr>
map <Down> :echo "NOPE!"<cr>

" Move around splits with <c-hjkl>
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l
nnoremap <leader><leader> <c-^>

"set rnu
"au InsertEnter * :set nu
"au InsertLeave * :set rnu
"au FocusLost * :set nu
"au FocusGained * :set rnu

set guioptions-=T
set guioptions-=r
set go-=L

function! MapCR()
  nnoremap <cr> :nohlsearch<cr>
endfunction
call MapCR()

map <leader>gm :CommandTFlush<cr>\|:CommandT masterpages<cr>
map <leader>gu :CommandTFlush<cr>\|:CommandT usercontrols<cr>
map <leader>gx :CommandTFlush<cr>\|:CommandT xslt<cr>

set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

map <S-Enter> O<Esc>
map <CR> o<Esc>

fun! <SID>StripTrailingWhitespaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
endfun

autocmd FileType c,cpp,java,php,ruby,python autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" Wrap visual selection in an HTML tag.
vmap <Leader>w <Esc>:call VisualHTMLTagWrap()<CR>
function! VisualHTMLTagWrap()
  let tag = input("Tag to wrap block: ")
  if len(tag) > 0
    normal `>
    if &selection == 'exclusive'
      exe "normal i</".tag.">"
    else
      exe "normal a</".tag.">"
    endif
    normal `<
    exe "normal i<".tag.">"
    normal `<
  endif
endfunction

